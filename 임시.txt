이제 제안서 관련해서 코드를 작성해야하는데

이제 못 보여준 Nodes 폴더의 코드들을 보여줄게

__init__ .py

from .loader_node import pdf_markdown_loader_node, pyMuPDF_loader_node
from .preprocess_node import start_node
from .retriever_node import bm25_retriever_node, hybrid_retriever_node, vector_retriever_node, vector_direct_retriever_node
from .llm_answer_node import proposal_maker_node
from .ocr_node import upstage_ocr_node, python_tessorect_ocr_node

__all__ = [
    "pdf_markdown_loader_node","pyMuPDF_loader_node", 
    "start_node", 
    "retriever_node",
    
    "bm25_retriever_node","hybrid_retriever_node","vector_retriever_node", "vector_direct_retriever_node"
    
    "proposal_maker_node",

    "upstage_ocr_node","python_tessorect_ocr_node",
    
    ]

llm_answer_node.py

import os, glob, sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from graph_definition import GraphState

from dotenv import load_dotenv
load_dotenv()

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

from typing import List
from langchain_core.pydantic_v1 import BaseModel, Field


class CompanyInfo(BaseModel):
    company_name: str = Field(..., description="회사이름")
    company_address: str = Field(..., description="회사주소")
    research_necessity: str = Field(..., description="연구개발과제의 필요성 (지원 분야 기반)")
    research_objectives: str = Field(..., description="연구개발과제의 목표 및 내용 (지원 분야 기반)")
    technical_outcome: str = Field(..., description="기술적 활용방안 및 기대성과")
    industrial_outcome: str = Field(..., description="산업적 활용방안 및 기대성과")
    social_outcome: str = Field(..., description="사회적 활용방안 및 기대성과")
    company_history: List[str] = Field(default_factory=list, description="회사 이력")
    company_introduction: str = Field(..., description="회사 소개")
    main_business: List[str] = Field(..., description="회사 주요 업무")
    company_vision: str = Field(..., description="회사 비전")

structured_llm = ChatOpenAI(model='gpt-4o-mini').with_structured_output(CompanyInfo)
base_llm = ChatOpenAI(model='gpt-4o-mini')

prompt = PromptTemplate.from_template("""
당신은 유능한 연구개발 제안서 초안 작성 AI 어시스턴트 입니다.
회사의 주요 분야와 회사에 대한 내용이 주어지면 연구개발 제안서를 작성해주세요.
분량은 A4 2장정도로 작성합니다.
                                      
[Company Main Field]
{company_filed}
                                             
[Company Information]
{company_context}        
""")

structed_chain = prompt | structured_llm
chain = prompt | base_llm | StrOutputParser()

def proposal_maker_node(state : GraphState) -> GraphState:
    #company_info = state['question']

    company_info = ""

    for info in state['question_split_page']:
        company_info += str(info)
        
    company_field = state['main_filed']

    proposal_context = chain.invoke({"company_filed" : company_field, "company_context" : company_info})

    return GraphState(
        proposal_context=proposal_context
    )


loader_node.py

import os, glob, sys

# 그래프 상태 정의 로드
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from graph_definition import GraphState

# PDF 텍스트 마크다운 로더
def pdf_markdown_loader_node(state: GraphState) -> GraphState:
    import pymupdf4llm
    
    pdf_file_name = state['file_name']
    pdf_markdown = pymupdf4llm.to_markdown(pdf_file_name)

    return GraphState(
        question = pdf_markdown
    )

# PyMuPDF 로더
def pyMuPDF_loader_node(state : GraphState) -> GraphState:
    from langchain_community.document_loaders import PyMuPDFLoader
    pdf_file_name = state['file_name']

    loader = PyMuPDFLoader(pdf_file_name)
    docs = loader.load()

    texts = ""
    page_splited_text = []

    for doc in docs:
        add_contents = doc.page_content

        if add_contents == '' :
            add_contents = "None"

        texts += add_contents
        page_splited_text.append(add_contents)
    
    return GraphState(
        question = texts,
        question_split_page = page_splited_text
    )

# 기본 PDF 텍스트 로더
def pdf_base_loader_node():
    pass

# CSV 로더
def csv_loader_node():
    pass

# HWP 로더
def hwp_loader():
    pass

# 업스테이지 레이아웃 분석기
def upstage_layout_parser():
    pass

ocr_node.py

import os, glob, sys


"""
미구현, 추후 이미지 입력 데이터 처리시 구현 시작
"""

# 그래프 상태 정의 로드
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from graph_definition import GraphState

# PDF 이미지 처리 라이브러리
from pdf2image import convert_from_path

def get_upstage_document_ocr(image_path):
    import requests
    api_key = "up_slmPU1Ldu169KdRPWgde2FsCW4V3p"
        
    url = "https://api.upstage.ai/v1/document-ai/ocr"
    headers = {"Authorization": f"Bearer {api_key}"}
    files = {"document": open(image_path, "rb")}
    response = requests.post(url, headers=headers, files=files)
    
    return response.json()['text']

def python_tessorect_ocr(image_path):
    import pytesseract
    from PIL import Image

    image = Image.open(image_path)
    text = pytesseract.image_to_string(image, lang='kor+eng')
    
    return text

def pdf_to_images(pdf_path, dpi=200, fmt='jpg'):
    output_dir = "image_temp"
    # 출력 디렉토리가 없으면 생성
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    try:
        # PDF를 이미지로 변환
        images = convert_from_path(pdf_path, dpi=dpi)
        
        # 생성된 이미지 파일들의 경로를 저장할 리스트
        image_paths = []
        
        # 각 페이지를 이미지로 저장
        for i, image in enumerate(images):
            # 파일명 생성 (예: page_001.jpg)
            file_name = f'page_{str(i+1).zfill(3)}.{fmt}'
            file_path = os.path.join(output_dir, file_name)
            
            # 이미지 저장
            # jpg 포맷인 경우 'JPEG'로 저장, 그 외에는 대문자로 변환하여 저장
            save_fmt = 'JPEG' if fmt.lower() in ['jpg', 'jpeg'] else fmt.upper()
            image.save(file_path, save_fmt)
            image_paths.append(file_path)
            
            
        print(pdf_path,"이미지 저장 완료")

        return image_paths
    
    except Exception as e:
        print(f'에러 발생: {str(e)}')
        return []

# 분리된 이미지를 기반으로 OCR을 수행합니다
def upstage_ocr_node(state : GraphState) -> GraphState:
    loader_question = state['question_split_page']

    pdf_to_images(state['file_name'])

    image_paths = glob.glob("image_temp/*.jpg")

    try:
        # OCR 수행
        for image_path in image_paths:
            result = get_upstage_document_ocr(image_path)
            loader_question.append(result)

    finally:
        # 임시 이미지 파일 정리
        cleanup_temp_images()

    return GraphState(
        question_split_page = loader_question
    )

# 분리된 이미지를 기반으로 OCR을 수행합니다
from concurrent.futures import ProcessPoolExecutor
import glob

def python_tessorect_ocr_node(state: GraphState) -> GraphState:
    loader_question = state['question_split_page']
    
    pdf_to_images(state['file_name'])
    image_paths = glob.glob("image_temp/*.jpg")
    
    try:
        # ProcessPoolExecutor를 사용한 병렬 처리
        with ProcessPoolExecutor() as executor:
            # map()을 사용하여 여러 이미지를 동시에 처리
            results = list(executor.map(python_tessorect_ocr, image_paths))
            
            # 결과를 loader_question에 추가
            loader_question.extend(results)
            
    finally:
        cleanup_temp_images()
    
    return GraphState(
        question_split_page=loader_question
    )
        


def cleanup_temp_images():
    """
    image_temp 디렉토리의 모든 임시 파일을 삭제합니다.
    디렉토리가 존재하지 않는 경우 무시합니다.
    """
    temp_dir = "image_temp"
    
    if os.path.exists(temp_dir):
        try:
            # 방법 1: 디렉토리와 그 내용을 모두 삭제 후 다시 생성
            # shutil.rmtree(temp_dir)
            # os.makedirs(temp_dir, exist_ok=True)
            
            # 또는 방법 2: 디렉토리 내부 파일만 삭제
            for file_path in glob.glob(os.path.join(temp_dir, "*")):
                os.remove(file_path)
            
            print(f"Successfully cleaned up {temp_dir} directory")
        except Exception as e:
            print(f"Error cleaning up temporary files: {str(e)}")


preprocess_node.py

import os, glob, sys from pathlib import Path  # 그래프 상태 정의 로드 sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from graph_definition import GraphState   """ # GraphState 상태를 저장하는 용도로 사용합니다. class GraphState(TypedDict):     question: str  # 사용자 질문 스트링 - 회사 브로셔     context: str  # 문서의 검색 결과 - 공고 결과     answer: str  # 답변     relevance: str  # 답변의 문서에 대한 관련성 """  def start_node(state : GraphState) -> GraphState:     file_name = state['file_name']     file_type = Path(file_name).suffix[1:].lower()      return GraphState(         file_type = file_type     )  

reranking_node.py

import os, glob, sys
from pathlib import Path

# 그래프 상태 정의 로드
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from graph_definition import GraphState

from FlagEmbedding import FlagReranker
reranker = FlagReranker('BAAI/bge-reranker-v2-m3', use_fp16=True, device='cuda') 

# INPUT = [question, title]
# OUTPUT = SORTED BY SCORE [question, title]

def reranking(titles: list[str]) -> list[str]:
    scores = reranker.compute_score(titles, normalize=True)
    scores = [[title[1],score] for title, score in zip(titles,scores)]
    scores = sorted(scores, key=lambda x:x[1], reverse=True)
    return scores

def rerank_node(state : GraphState) -> GraphState:
    pass

retriever_node.py

import os, glob, sys

# 그래프 상태 정의 로드
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from graph_definition import GraphState
from Retriever.retrievers import get_hybrid_retriever, get_bm25_retriever, get_base_retriever

hybrid_retirever = None
bm25_retriever = None
vector_retriever = None
vectorstore = None

def hybrid_retriever_node(state : GraphState) -> GraphState:
    global hybrid_retirever

    if hybrid_retirever == None:
        hybrid_retirever = get_hybrid_retriever()

    question = state['question']
    search_result = hybrid_retirever.invoke(question)

    return GraphState(
        context = search_result
    )

def vector_retriever_node(state : GraphState) -> GraphState:
    global vector_retriever

    # 벡터스토어 임시 추가
    if vector_retriever == None:
        vector_retriever, vectorstore = get_base_retriever()

    question = state['question']
    search_result = vector_retriever.invoke(question)
    
    return GraphState(
        context = search_result
    )

def bm25_retriever_node(state : GraphState) -> GraphState:
    global bm25_retriever

    if bm25_retriever == None:
        bm25_retriever = get_bm25_retriever()
        
    question = state['question']
    search_result = bm25_retriever.invoke(question)

    return GraphState(
        context = search_result
    )

from VectorStore.run_embedding import perform_embedding
import numpy as np


def vector_direct_retriever_node(state : GraphState) -> GraphState:
    global vector_retriever, vectorstore

    # 벡터스토어 임시 추가
    if vector_retriever == None:
        vector_retriever, vectorstore = get_base_retriever(topk=30)

    split_question = state['question_split_page']

    # [original_sentences, vectors] 형태
    page_embedding = perform_embedding(split_question)

    # [vectors] 만 추출
    page_embedding = page_embedding[1]
    average_embedding = np.mean(page_embedding, axis=0)

    search_result_with_vector = vectorstore.similarity_search_by_vector(embedding=average_embedding, k=30)

    return GraphState(
        context = search_result_with_vector
    )

이렇게 되어있어

이제는 제안서_API를 만들고자하는데

그전에 그래프 파이프라인을 먼절 만들어야겠지?

